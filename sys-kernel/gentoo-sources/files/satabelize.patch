From 0609700673a2ca3da2983570ff1ece9551f089aa Mon Sep 17 00:00:00 2001
From: tihmstar <tihmstar@gmail.com>
Date: Fri, 25 Dec 2020 22:20:09 +0100
Subject: [PATCH] added Belize internal HDD support

---
 drivers/ata/ahci.c             | 242 ++++++++++++++++++++++++++++
 drivers/ata/ahci.h             |  26 +++
 drivers/usb/host/xhci-aeolia.c | 278 +++++++++++++++++++++++++++++++--
 drivers/usb/host/xhci-aeolia.h |  14 ++
 4 files changed, 546 insertions(+), 14 deletions(-)
 create mode 100644 drivers/usb/host/xhci-aeolia.h

diff --git a/drivers/ata/ahci.c b/drivers/ata/ahci.c
index 87e97184b6ffb..3cfaf9583135a 100644
--- a/drivers/ata/ahci.c
+++ b/drivers/ata/ahci.c
@@ -1867,6 +1867,248 @@ static void ahci_remove_one(struct pci_dev *pdev)
 #endif
 }
 
+#ifdef CONFIG_X86_PS4
+void bpcie_sata_phy_init(struct device *dev, struct ahci_controller *ctlr)
+{
+	int i;
+	u32 v;
+	u32 v2;
+	bool is_phy_gen_3;
+	unsigned int trace_length;
+
+  dev_info(dev, "Belize SATA PHY init\n");
+
+	for (i = 0; i < 100; i++) {
+		udelay(10000);
+	}
+
+  //step 1
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x81);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffff00) | 1);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xa5);
+
+  //step 2
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+
+  if (ctlr->dev_id == 0x90ca104d || ctlr->dev_id == 0x909f104d || ctlr->dev_id == 0x90d9104d) {
+    is_phy_gen_3 = false;
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, v & 0xfffff3ff);
+  }else{
+    u32 v2 = bpcie_ahci_read(ctlr->r_mem, 0);
+    if ((v2 & 0xf00000) != 0x300000) {
+      bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff3ff) | 0x400);
+      is_phy_gen_3 = false;
+    }else{
+      dev_info(dev,"PHY SET GEN3\n");
+      bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff3ff) | 0x800);
+      is_phy_gen_3 = true;
+    }
+  }
+  //--- step 3 ---
+  if (ctlr->trace_len == 0) {
+    trace_length = 6;
+  }else{
+    trace_length = ctlr->trace_len & 0x1f;
+    if (trace_length >= 0x13) {
+      trace_length = 6;
+    }
+  }
+  dev_info(dev,"Belize SATA PHY Trace length : %d\n",trace_length);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xa3);
+
+  //--- step 4 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff3ff) | 0x800);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xd0);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff800) | 0x441);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xe1);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffff8f) | 0x60);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xd0);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffff3fff) | 0x8000);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xf1);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff3ff) | 0x400);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x48);
+
+  //--- step 5 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, 0x62d8);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xe);
+
+  //--- step 6 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v & 0xffffdfff);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8d);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v | 1);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8f);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v | 1);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x91);
+
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v | 1);
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8d);
+
+  //--- step 7 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  if (trace_length >= 0xe) {
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc1) | 0x28);
+  }else{
+    if (trace_length < 0xb) {
+      bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc1) | 8);
+    }else{
+      bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc1) | 0x10);
+    }
+  }
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8f);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc1) | 0x12);
+
+  //--- step 8 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x91);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  if (trace_length < 5) {
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc1) | 0x24);
+  }else{
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc1) | 0x2a);
+  }
+
+  //--- step 9 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xff);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, 1);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x97);
+
+  //--- step 10 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  if (is_phy_gen_3) {
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffff80) | 0xd3);
+  }else{
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffff80) | 0xee);
+  }
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x95);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffff00) | 0xee);
+
+  //--- step 11 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xff);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, 0);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8d);
+
+  //--- step 12 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  if (trace_length < 0xe){
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff87f) | 0x900);
+  }else{
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff87f) | 0xe00);
+  }
+
+  //--- step 13 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8f);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff07f) | 0x900);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x91);
+
+  //--- step 14 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  if (is_phy_gen_3){
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff87f) | 0xd00);
+  }else{
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xfffff87f) | 0xe80);
+  }
+
+  //--- step 15 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 200);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v & 0xffffefff);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 10);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v & 0xffffefff);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x82);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v | 0x1000);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xc9);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, v | 0x1000);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x84);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffffffc0) | 0xc);
+
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8d);
+
+  //--- step 16 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  v = v & 0xffff0fff;
+  if (trace_length < 0xe) {
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, v | 0x8000);
+  }else{
+    bpcie_ahci_write(ctlr->r_mem, 0x17c, v);
+  }
+
+  //--- step 17 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0x8f);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+  bpcie_ahci_write(ctlr->r_mem, 0x17c, (v & 0xffff0fff) | 0x8000);
+
+  //--- step 18 ---
+  bpcie_ahci_write(ctlr->r_mem, 0xa0, 0);
+  v = bpcie_ahci_read(ctlr->r_mem, 0xa4);
+  bpcie_ahci_write(ctlr->r_mem, 0xa4, v | 0x40);
+
+  //--- step 19 ---
+  if (ctlr->dev_id != 0x909f104d && ctlr->dev_id != 0x90ca104d && ctlr->dev_id != 0x90d9104d) {
+    v2 = 0x73000000;
+  }else{
+    v2 = 0x30000000;
+  }
+
+  //--- step 20 ---
+  bpcie_ahci_write(ctlr->r_mem, 0xa0, 4);
+  v = bpcie_ahci_read(ctlr->r_mem, 0xa4);
+  bpcie_ahci_write(ctlr->r_mem, 0xa4, (v & 0x88ffffff) | v2);
+
+  //--- step 21 ---
+  v = bpcie_ahci_read(ctlr->r_mem, 0xa4);
+
+  //--- step 22 ---
+	for (i = 0; i < 100; i++) {
+		udelay(10000);
+	}
+
+  //--- step 23 ---
+  bpcie_ahci_write(ctlr->r_mem, 0x178, 0xf9);
+  v = bpcie_ahci_read(ctlr->r_mem, 0x17c);
+
+  if (is_phy_gen_3) {
+    dev_info(dev,"Align 90=0x%02x\n",v & 0x7f);
+  }
+  //done!
+}
+
+EXPORT_SYMBOL_GPL(bpcie_sata_phy_init);
+#endif
+
 module_pci_driver(ahci_pci_driver);
 
 MODULE_AUTHOR("Jeff Garzik");
diff --git a/drivers/ata/ahci.h b/drivers/ata/ahci.h
index 781b898e5785e..b599046d4160d 100644
--- a/drivers/ata/ahci.h
+++ b/drivers/ata/ahci.h
@@ -445,4 +445,30 @@ static inline int ahci_nr_ports(u32 cap)
 	return (cap & 0x1f) + 1;
 }
 
+#ifdef CONFIG_X86_PS4
+struct f_resource{
+	u64 resource_i_ptr;
+	u64 r_bustag;
+	void __iomem * r_bushandle;
+};
+
+struct ahci_controller{
+	void *dev;
+	int dev_id;
+	struct f_resource *r_mem;
+	u32 trace_len;
+};
+
+void bpcie_sata_phy_init(struct device *dev, struct ahci_controller *ctlr);
+
+static inline void bpcie_ahci_write(struct f_resource *r_mem, u32 offset, u32 val) {
+	iowrite32(val, r_mem->r_bushandle + offset);
+}
+
+static inline u32 bpcie_ahci_read(struct f_resource *r_mem, u32 offset) {
+		return ioread32(r_mem->r_bushandle + offset);
+}
+#endif
+
+
 #endif /* _AHCI_H */
diff --git a/drivers/usb/host/xhci-aeolia.c b/drivers/usb/host/xhci-aeolia.c
index 6bc0cb03ceb37..c99623d60733f 100644
--- a/drivers/usb/host/xhci-aeolia.c
+++ b/drivers/usb/host/xhci-aeolia.c
@@ -13,6 +13,8 @@
 #include <linux/module.h>
 #include <linux/acpi.h>
 #include <asm/ps4.h>
+#include "xhci-aeolia.h"
+#include "../../ps4/aeolia.h"
 
 #include "xhci.h"
 
@@ -23,6 +25,7 @@ static struct hc_driver __read_mostly xhci_aeolia_hc_driver;
 #define NR_DEVICES 3
 
 struct aeolia_xhci {
+	struct ata_host *host;
 	int nr_irqs;
 	struct usb_hcd *hcd[NR_DEVICES];
 };
@@ -60,7 +63,7 @@ static int xhci_aeolia_probe_one(struct pci_dev *dev, int index)
 
 	// ok...adding this printk appears to have introduced a delay that fixed
 	// bringup of the middle host controller, so w/e for now...
-	
+
 	printk("xhci_aeolia_probe_one %d, controller is %x\n", index, dev->device);
 
 	hcd = usb_create_hcd(driver, &dev->dev, pci_name(dev));
@@ -70,7 +73,7 @@ static int xhci_aeolia_probe_one(struct pci_dev *dev, int index)
 
 	hcd->rsrc_start = pci_resource_start(dev, 2 * index);
 	hcd->rsrc_len = pci_resource_len(dev, 2 * index);
-	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len,
+	if (!devm_request_mem_region(&dev->dev, hcd->rsrc_start, hcd->rsrc_len,
 			driver->description)) {
 		dev_dbg(&dev->dev, "controller already in use\n");
 		retval = -EBUSY;
@@ -113,7 +116,7 @@ static int xhci_aeolia_probe_one(struct pci_dev *dev, int index)
 unmap_registers:
 	iounmap(hcd->regs);
 release_mem_region:
-	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+	devm_release_mem_region(&dev->dev, hcd->rsrc_start, hcd->rsrc_len);
 put_hcd:
 	usb_put_hcd(hcd);
 	dev_err(&dev->dev, "init %s(%d) fail, %d\n",
@@ -134,10 +137,222 @@ static void xhci_aeolia_remove_one(struct pci_dev *dev, int index)
 	usb_remove_hcd(xhci->shared_hcd);
 	usb_remove_hcd(hcd);
 	usb_put_hcd(xhci->shared_hcd);
+	iounmap(hcd->regs);
 	usb_put_hcd(hcd);
 	axhci->hcd[index] = NULL;
 }
 
+#define DRV_VERSION	"3.0"
+#define DRV_NAME	"ahci"
+static const struct ata_port_info ahci_port_info = {
+	.flags		= AHCI_FLAG_COMMON,
+	.pio_mask	= ATA_PIO4,
+	.udma_mask	= ATA_UDMA6,
+	.port_ops	= &ahci_ops,
+};
+
+static struct scsi_host_template ahci_sht = {
+	AHCI_SHT(DRV_NAME),
+};
+
+static bool bus_master;
+static int ahci_init_one(struct pci_dev *pdev)
+{
+	struct aeolia_xhci *axhci = pci_get_drvdata(pdev);
+	struct ata_port_info pi = ahci_port_info;
+	const struct ata_port_info *ppi[] = { &pi, NULL };
+	struct ahci_host_priv *hpriv;
+	struct ata_host *host;
+	int n_ports, i, rc;
+	int ahci_pci_bar = 2;
+	resource_size_t		rsrc_start;
+	resource_size_t		rsrc_len;
+
+	VPRINTK("ENTER\n");
+
+	WARN_ON((int)ATA_MAX_QUEUE > AHCI_MAX_CMDS);
+
+	ata_print_version_once(&pdev->dev, DRV_VERSION);
+
+	/*
+	rc = pcim_iomap_regions_request_all(pdev, 1 << ahci_pci_bar, DRV_NAME);
+	if (rc == -EBUSY)
+		pcim_pin_device(pdev);
+	if (rc)
+		return rc;
+	*/
+
+	hpriv = devm_kzalloc(&pdev->dev, sizeof(*hpriv), GFP_KERNEL);
+	//hpriv = kzalloc(sizeof(*hpriv), GFP_KERNEL);
+	if (!hpriv)
+		return -ENOMEM;
+	hpriv->flags |= (unsigned long)pi.private_data;
+
+	//hpriv->mmio = pcim_iomap_table(pdev)[ahci_pci_bar];
+	rsrc_start = pci_resource_start(pdev, ahci_pci_bar);
+	rsrc_len = pci_resource_len(pdev, ahci_pci_bar);
+	//if (!request_mem_region(rsrc_start, rsrc_len, "xhci-ahci.mem")) {
+	if (!devm_request_mem_region(&pdev->dev, rsrc_start, rsrc_len, "xhci-ahci.mem")) {
+		dev_dbg(&pdev->dev, "controller already in use\n");
+		rc = -EBUSY;
+		goto put_hpriv;
+	}
+
+
+	hpriv->mmio = pci_ioremap_bar(pdev, ahci_pci_bar);
+	if (hpriv->mmio == NULL) {
+		dev_dbg(&pdev->dev, "error mapping memory\n");
+		rc = -EFAULT;
+		goto release_mem_region;
+	}
+
+	struct f_resource* r_mem;
+	struct ahci_controller* ctlr;
+	r_mem = kzalloc(sizeof(*r_mem), GFP_KERNEL);
+	if (r_mem) {
+		r_mem->r_bustag = 1;//mem
+		r_mem->r_bushandle = hpriv->mmio;
+
+		ctlr = kzalloc(sizeof(*ctlr), GFP_KERNEL);
+		if (ctlr) {
+			ctlr->r_mem = r_mem;
+			ctlr->dev_id = 0; //or 0x90ca104d;
+			ctlr->trace_len = 6;
+			bpcie_sata_phy_init(&pdev->dev, ctlr);
+			kfree(ctlr);
+		}
+		kfree(r_mem);
+	}
+	device_wakeup_enable(&pdev->dev);
+
+	/* save initial config */
+	ahci_save_initial_config(&pdev->dev, hpriv);
+
+	/* prepare host */
+	if (hpriv->cap & HOST_CAP_NCQ) {
+		pi.flags |= ATA_FLAG_NCQ;
+		/*
+		 * Auto-activate optimization is supposed to be
+		 * supported on all AHCI controllers indicating NCQ
+		 * capability, but it seems to be broken on some
+		 * chipsets including NVIDIAs.
+		 */
+		if (!(hpriv->flags & AHCI_HFLAG_NO_FPDMA_AA))
+			pi.flags |= ATA_FLAG_FPDMA_AA;
+
+		/*
+		 * All AHCI controllers should be forward-compatible
+		 * with the new auxiliary field. This code should be
+		 * conditionalized if any buggy AHCI controllers are
+		 * encountered.
+		 */
+		pi.flags |= ATA_FLAG_FPDMA_AUX;
+	}
+
+	if (hpriv->cap & HOST_CAP_PMP)
+		pi.flags |= ATA_FLAG_PMP;
+
+	ahci_set_em_messages(hpriv, &pi);
+
+	/* CAP.NP sometimes indicate the index of the last enabled
+	 * port, at other times, that of the last possible port, so
+	 * determining the maximum port number requires looking at
+	 * both CAP.NP and port_map.
+	 */
+	n_ports = max(ahci_nr_ports(hpriv->cap), fls(hpriv->port_map));
+
+	host = ata_host_alloc_pinfo(&pdev->dev, ppi, n_ports);
+	if (!host) {
+		rc = -ENOMEM;
+		goto unmap_registers;
+	}
+	axhci->host = host;
+	pci_set_drvdata(pdev, axhci);
+
+	host->private_data = hpriv;
+
+	{
+		int index = 1;
+		int irq = (axhci->nr_irqs > 1) ? (pdev->irq + index) : pdev->irq;
+		hpriv->irq = irq;
+	}
+
+	if (!(hpriv->cap & HOST_CAP_SSS) || ahci_ignore_sss)
+		host->flags |= ATA_HOST_PARALLEL_SCAN;
+	else
+		dev_info(&pdev->dev, "SSS flag set, parallel bus scan disabled\n");
+
+	if (pi.flags & ATA_FLAG_EM)
+		ahci_reset_em(host);
+
+	for (i = 0; i < host->n_ports; i++) {
+		struct ata_port *ap = host->ports[i];
+
+		ata_port_pbar_desc(ap, ahci_pci_bar, -1, "abar");
+		ata_port_pbar_desc(ap, ahci_pci_bar,
+				   0x100 + ap->port_no * 0x80, "port");
+
+		/* set enclosure management message type */
+		if (ap->flags & ATA_FLAG_EM)
+			ap->em_message_type = hpriv->em_msg_type;
+
+
+		/* disabled/not-implemented port */
+		if (!(hpriv->port_map & (1 << i)))
+			ap->ops = &ata_dummy_port_ops;
+	}
+
+	rc = ahci_reset_controller(host);
+	dev_dbg(&pdev->dev, "ahci_reset_controller returned %d\n", rc);
+	if (rc)
+		goto release_host;
+
+	ahci_init_controller(host);
+	ahci_print_info(host, "ATA");
+
+	if (!bus_master) {
+		pci_set_master(pdev);
+		bus_master = true;
+	}
+
+	rc = ahci_host_activate(host, &ahci_sht);
+	dev_dbg(&pdev->dev, "ahci_host_activate returned %d\n", rc);
+	if (rc) {
+		goto host_deactivate;
+	}
+
+	pm_runtime_put_noidle(&pdev->dev);
+	return 0;
+
+	host_deactivate:
+	release_host:
+	unmap_registers:
+		iounmap(hpriv->mmio);
+	release_mem_region:
+		//release_mem_region(rsrc_start, rsrc_len);
+		devm_release_mem_region(&pdev->dev, rsrc_start, rsrc_len);
+	put_hpriv:
+		//kfree(hpriv);
+		devm_kfree(&pdev->dev, hpriv);
+		dev_err(&pdev->dev, "init %s fail, %d\n",
+				pci_name(pdev), rc);
+	return rc;
+}
+
+static void ahci_remove_one(struct pci_dev *pdev)
+{
+	pm_runtime_get_noresume(&pdev->dev);
+
+	struct aeolia_xhci *axhci = pci_get_drvdata(pdev);
+	if (axhci && axhci->host) {
+		ata_host_detach(axhci->host);
+		struct ahci_host_priv *hpriv = axhci->host->private_data;
+		if (hpriv) {
+			iounmap(hpriv->mmio);
+		}
+		axhci->host = NULL;
+	}
+}
 
 static int xhci_aeolia_probe(struct pci_dev *dev, const struct pci_device_id *id)
 {
@@ -151,7 +366,7 @@ static int xhci_aeolia_probe(struct pci_dev *dev, const struct pci_device_id *id
 	if (pci_enable_device(dev) < 0)
 		return -ENODEV;
 
-	axhci = kzalloc(sizeof(*axhci), GFP_KERNEL);
+	axhci = devm_kzalloc(&dev->dev, sizeof(*axhci), GFP_KERNEL);
 	if (!axhci) {
 		retval = -ENOMEM;
 		goto disable_device;
@@ -163,16 +378,22 @@ static int xhci_aeolia_probe(struct pci_dev *dev, const struct pci_device_id *id
 		goto free_axhci;
 	}
 
-	pci_set_master(dev);
-
 	if (pci_set_dma_mask(dev, DMA_BIT_MASK(31)) ||
 		pci_set_consistent_dma_mask(dev, DMA_BIT_MASK(31))) {
 		return -ENODEV;
 	}
 
+	retval = ahci_init_one(dev);
+	dev_dbg(&dev->dev, "ahci_init_one returned %d", retval);
+	if (!bus_master) {
+		pci_set_master(dev);
+		bus_master = true;
+	}
+
 	for (idx = 0; idx < NR_DEVICES; idx++) {
- 		if(dev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI && idx == 1) 
+ 		if(dev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI && idx == 1){ //this is for Belize and Baikal
 			continue;
+		}
 		retval = xhci_aeolia_probe_one(dev, idx);
 		if (retval)
 			goto remove_hcds;
@@ -185,7 +406,8 @@ static int xhci_aeolia_probe(struct pci_dev *dev, const struct pci_device_id *id
 		xhci_aeolia_remove_one(dev, idx);
 	apcie_free_irqs(dev->irq, axhci->nr_irqs);
 free_axhci:
-	kfree(axhci);
+	devm_kfree(&dev->dev, axhci);
+	pci_set_drvdata(dev, NULL);
 disable_device:
 	pci_disable_device(dev);
 	return retval;
@@ -195,21 +417,49 @@ static void xhci_aeolia_remove(struct pci_dev *dev)
 {
 	int idx;
 	struct aeolia_xhci *axhci = pci_get_drvdata(dev);
+	if (!axhci)
+		return;
 
 	for (idx = 0; idx < NR_DEVICES; idx++) {
 		if(dev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI) {
 			if(idx != 1)
 				xhci_aeolia_remove_one(dev, idx);
+			else
+				ahci_remove_one(dev);
 		}
 		else
 			xhci_aeolia_remove_one(dev, idx);
 	}
-	
+
 	apcie_free_irqs(dev->irq, axhci->nr_irqs);
-	kfree(axhci);
 	pci_disable_device(dev);
 }
 
+static void xhci_hcd_pci_shutdown(struct pci_dev *dev){
+	struct aeolia_xhci *axhci;
+	struct usb_hcd		*hcd;
+	int idx;
+
+	axhci = pci_get_drvdata(dev);
+	if (!axhci)
+		return;
+
+	for (idx = 0; idx < NR_DEVICES; idx++) {
+		if(dev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI) {
+			if(idx != 1) {
+				hcd = axhci->hcd[idx];
+				if (hcd) {
+					if (test_bit(HCD_FLAG_HW_ACCESSIBLE, &hcd->flags) && hcd->driver->shutdown) {
+						hcd->driver->shutdown(hcd);
+						if (usb_hcd_is_primary_hcd(hcd) && hcd->irq > 0)
+							free_irq(hcd->irq, hcd);
+					}
+				}
+			}
+		}
+	}
+}
+
 
 static const struct pci_device_id pci_ids[] = {
 		{ PCI_DEVICE(PCI_VENDOR_ID_SONY, PCI_DEVICE_ID_SONY_AEOLIA_XHCI) },
@@ -227,7 +477,7 @@ static int xhci_aeolia_suspend(struct device *dev)
 	struct xhci_hcd	*xhci;
 	int retval;
 	struct pci_dev		*pdev = to_pci_dev(dev);
-	
+
 	for (idx = 0; idx < NR_DEVICES; idx++) {
 		if(pdev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI && idx == 1)
 			continue;
@@ -255,8 +505,8 @@ static int xhci_aeolia_resume(struct device *dev)
 	struct pci_dev		*pdev = to_pci_dev(dev);
 
 	for (idx = 0; idx < NR_DEVICES; idx++) {
- 		if(pdev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI && idx == 1) 
-			continue;		
+ 		if(pdev->device != PCI_DEVICE_ID_SONY_AEOLIA_XHCI && idx == 1)
+			continue;
 		xhci = hcd_to_xhci(axhci->hcd[idx]);
 		retval = xhci_resume(xhci, 0);
 		if (retval < 0)
@@ -279,7 +529,7 @@ static struct pci_driver xhci_aeolia_driver = {
 	.remove =	xhci_aeolia_remove,
 	/* suspend and resume implemented later */
 
-	.shutdown = 	usb_hcd_pci_shutdown,
+	.shutdown = 	xhci_hcd_pci_shutdown,
 #ifdef CONFIG_PM_SLEEP
 	.driver = {
 		.pm = &xhci_aeolia_pm_ops
diff --git a/drivers/usb/host/xhci-aeolia.h b/drivers/usb/host/xhci-aeolia.h
new file mode 100644
index 0000000000000..2b711d6a92cad
--- /dev/null
+++ b/drivers/usb/host/xhci-aeolia.h
@@ -0,0 +1,14 @@
+/*
+ * xhci-aeolia.h
+ *
+ *  Created on: 31 Oct 2019
+ *      Author: visicva
+ */
+
+#ifndef DRIVERS_USB_HOST_XHCI_AEOLIA_H_
+#define DRIVERS_USB_HOST_XHCI_AEOLIA_H_
+
+#include "../../ata/ahci.h"
+#include <linux/irqdomain.h>
+
+#endif /* DRIVERS_USB_HOST_XHCI_AEOLIA_H_ */
